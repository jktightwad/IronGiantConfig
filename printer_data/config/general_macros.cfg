#####################################################################
#  Macros
#####################################################################
[gcode_macro _OLD_PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    {% set SKIP_MESH = params.SKIP_MESH|default(False) %}
    {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
    {% set retract = 5 %}
    M107
    STATUS_HEATING
    M140 S{BED_TEMP}                         ; set bed final temp
    M190 S{BED_TEMP}                         ; wait for bed final temp
    M117 Grab Probe
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion
      {% if "z" not in printer.toolhead.homed_axes %}
          #Attach_Probe_Lock
          G32                         ;Only G28 Home if needed
          #Dock_Probe_Unlock
          #BED_MESH_LOAD
      {% else %}
          {% if printer.bed_mesh.profile_name == '' %}
              #Attach_Probe_Lock
              G32
              #Dock_Probe_Unlock
              #BED_MESH_LOAD
          {% else %}
              {% if not printer.quad_gantry_level.applied %}
                #Attach_Probe_Lock
                M117 QGL
                QUAD_GANTRY_LEVEL
                #Dock_Probe_Unlock
                G28 X Y	Z		      ; Re-home
                #BED_MESH_LOAD
              {% endif %}
              G91
              #G1 Z10 Y-10 X-10 F4000
              G90
          {% endif %}
      {% endif %}
    M117 Release Probe
    G1 X160 Y350 Z10 F9000
    M117 Heating..
    STATUS_HEATING
    M104 S{EXTRUDER_TEMP}
    {% if SKIP_MESH is sameas False %}
        Bed_Mesh_Clear
        Bed_Mesh_Load
    {% endif %}
    M109 S{EXTRUDER_TEMP}             ; Set and wait for nozzle to reach temperature
    SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=enable_purge VALUE="True"
    SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=wipe_qty VALUE="4"
    SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=purge_ret VALUE="6"    
    #clean_nozzle                      ; clean nozzle
    #CALIBRATE_Z
    #BED_MESH_LOAD
    #BED_MESH_PROFILE LOAD=default   ; load mesh if needed
    # Adjust the G-Code Z offset with the Z_ADJUST parameter if needed
    # SET_GCODE_OFFSET Z_ADJUST={z_adjust} MOVE=1
    #G0 F200 E25 ; Un-retract
    #G92 E0                         ; zero the extruder
    STATUS_READY
    M117 Intro Line..
    G92 E0
    #M82 #absolute mode for purge
    voron_purge
    #_PURGE_LINE
    #M83 #relative mode for print
    M117 Printing...
    status_printing

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED_TEMP|int %}
  {% set target_extruder = params.EXTRUDER_TEMP|int %}
  {% set target_chamber = params.CHAMBER_TEMP|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SHT-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
 # {% if params.BED|int > 90 %}
 #   SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
 #   STATUS_HEATING                                      # Sets SB-leds to heating-mode
 #   M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

 #   G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
 #   M190 S{target_bed}                                  # Sets the target temp for the bed
 #   SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
 #   TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  #{% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
  #  SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
  #  G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  #{% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info


  clean_nozzle                      ; clean nozzle
  CARTO_TOUCH #zero the nozzle to the bed surface

    ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode

  bed_mesh_calibrate ADAPTIVE=1                # Starts bed mesh
  #SET_GCODE_OFFSET Z=0.08
  
  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  clean_nozzle                      ; clean nozzle
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G0 F200 E25 ; Un-retract
  G92 E0                         ; zero the extruder
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position

[gcode_macro G32]
gcode:
    #BED_MESH_CLEAR
    {% if "z" not in printer.toolhead.homed_axes %}
        G28                             ;Only G28 Home if needed
    {% endif %}
    QUAD_GANTRY_LEVEL
    G28 Z
    G91
    G1 Z10 Y-10 X-10 F4000
    G90

[gcode_macro _PURGE_LINE]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28                             ;Only G28 Home if needed
    {% endif %}
    G0 X100 Y5 Z0.2 F9000         ; Move to start position
    G92 E0                        ; Reset Extruder
    G1 E10 F600                   ; Extrude a little
    G1 X250 E20 F1000              ; Draw line
    G92 E0                        ; Reset Extruder
    G91                           ; relative positioning
    G0 Z10 F1000                  ; Raise nozzle
    G90

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    G92 E0                         ; zero the extruder
    G1 E-1.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z5.00 X10.0 Y10.0 F20000    ; move nozzle to remove stringing
    M400                           ; wait for buffer to clear
    M220 S100                      ; reset print speed override to 100% 
    M221 S100               ; reset extrude factor override to 100% 
    G92 E0                         ; zero the extruder
    G1 E-29.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    
    G0  X10 Y10 F3600            ; park nozzle at rear
    STATUS_OFF
    #BED_MESH_CLEAR
    G90

[gcode_macro BED_MESH_LOAD_FULL_BED_TEMP]
description: Load an existing mesh or generate a new one
gcode:
  ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  ##### join everything to a single mesh name #####
  {% set mesh_name = "Bed_Temp-" + bed_temp|string + "C" %}
  ##### end of definitions #####
  {% if printer.configfile.config["bed_mesh " + mesh_name] is defined %}
    M117 Loaded Old Mesh
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD={mesh_name}
  {% else %}
    M117 Creating New Mesh
    BED_MESH_CALIBRATE PROFILE={mesh_name}
    {action_respond_info("Run SAVE_CONFIG after the print to store the mesh")}
  {% endif %}

[gcode_macro BED_MESH_LOAD]
description: Load an existing mesh or generate a new one
gcode:
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE ADAPTIVE=1


## MailsailOS Macros  
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(230) %}      #edit to your park position
    {% set y = params.Y|default(230) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    STATUS_BUSY
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    status_printing
    RESUME_BASE {get_params}
    
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    M220 S100                      ; reset print speed override to 100% 
    M221 S100               ; reset extrude factor override to 100% 
    TURN_OFF_HEATERS
    STATUS_OFF
    CANCEL_PRINT_BASE

[gcode_macro PRIME_EXTRUDER]
gcode:
    M117 Priming
    G92 E0
    G1 X2.1 Y20 Z2.0 F2000          ; Set Prime Line start point
    G1 X2.1 Y90 Z0.28 F2000.0 E5   ; Draw the first line
    G1 X2.4 Y90 Z0.28 F2000.0       ; Move to the side a little
    G1 X2.4 Y20.0 Z0.28 F2000.0 E10 ; Draw the second line
    G92 E0 
    G1 F2400 E-0.7 # Small retract to remove pressure
    G1 Z2.0 F3000 ;Move Z Axis up
    M117 Optimus Primed, lets go!

[gcode_macro PARKCENTER]
gcode:
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=PARKCENTER_state
    _CG28                          ; Home if not already homed
    G90                            ; absolute positioning
    G0 X175 Y175 Z{Z} F12000       ; move to center
    STATUS_READY
    RESTORE_GCODE_STATE NAME=PARKCENTER_state

# Compare the GET_POSITION output before and after, see if you skipped steps. IIRC you want the "mcu" line to show within 16 before and after (a full step)
[gcode_macro SPEED_TEST]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    {% set da = params.DIAGONAL_ACCEL|default(34000)|int %}
    {% set la = params.LINEAR_ACCEL|default(68000)|int %}

    {% set boarder_delta = 30 %}

    {% set min_x = 0 + boarder_delta %}
    {% set min_y = 0 + boarder_delta %}
    {% set max_x = 350 - boarder_delta %}
    {% set max_y = 350 - boarder_delta %}

    SAVE_GCODE_STATE NAME=SPEED_TEST
    G28 X Y
    GET_POSITION
    G90
    {% for iteration in range(i|int) %}
        G1 X{min_x} Y{min_y} F{da}
        G1 X{max_x} Y{max_y} F{da}
        G1 X{min_x} Y{min_y} F{da}
        G1 X{max_x} Y{max_y} F{da}

        G1 X{min_x} Y{max_y} F{la}

        G1 X{max_x} Y{min_y} F{da}
        G1 X{min_x} Y{max_y} F{da}
        G1 X{max_x} Y{min_y} F{da}
        G1 X{min_x} Y{max_y} F{da}

        G1 X{min_x} Y{min_y} F{la}
        G1 X{max_x} Y{min_y} F{la}
        G1 X{max_x} Y{max_y} F{la}
        G1 X{min_x} Y{max_y} F{la}
        G1 X{min_x} Y{min_y} F{la}
    {% endfor %}
    G28 X Y
    GET_POSITION
    RESTORE_GCODE_STATE NAME=SPEED_TEST
[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro Filament_Unload] 
gcode:
    STATUS_BUSY
    G91
    G1 E-100 F1800
    G90

[gcode_macro Filament_Load] 
gcode:
    STATUS_BUSY
    G91
    G1 E150 F500
    G90

[gcode_macro M600]
gcode:
    {% set X = params.X|default(240)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E2 F1000 #extrude a little to form a point
    G1 E-30 F1000 #retract out of the hot end
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro Disable_Steppers] 
gcode:
    M84

# run repeated Probe Accuracy tests, docking between each to see if Z is drifting
[gcode_macro Probe_Accuracy_Repeats]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    {% set s = params.S|default(10)|int %}
    SAVE_GCODE_STATE NAME=REPEATS_TEST
    {% for iteration in range(i|int) %}
        probe_accuracy samples={s}
    {% endfor %}
    RESTORE_GCODE_STATE NAME=REPEATS_TEST

    # run repeated Probe Accuracy tests, docking between each to see if Z is drifting
[gcode_macro Probe_Accuracy_Corners]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    {% set d = params.d|default('false') %}
    SAVE_GCODE_STATE NAME=REPEATS_TEST
    {% for iteration in range(i|int) %}
        G0 X30 Y12 F12000
        probe_accuracy dock={d}
        G0 X30 Y250 F12000
        probe_accuracy dock={d}
        G0 X320 Y250 F12000
        probe_accuracy dock={d}
        G0 X320 Y12 F12000
        probe_accuracy dock={d}
        G0 X150 Y150 F12000
        probe_accuracy dock={d}
    {% endfor %}
    Dock_PRobe_Unlock
    RESTORE_GCODE_STATE NAME=REPEATS_TEST

[gcode_macro PRINT_START_TPU]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
    {% set retract = 0 %}
    M107
    STATUS_HEATING
    M140 S{BED_TEMP}                         ; set bed final temp
    M190 S{BED_TEMP}                         ; wait for bed final temp
    Attach_Probe_Lock
      {% if "z" not in printer.toolhead.homed_axes %}
          G32                         ;Only G28 Home if needed
          BED_MESH_CALIBRATE
      {% else %}
          {% if printer.bed_mesh.profile_name == '' %}
              G32
              BED_MESH_CALIBRATE
          {% else %}
              {% if not printer.quad_gantry_level.applied %}
                M117 QGL
                QUAD_GANTRY_LEVEL
                Dock_Probe_Unlock
                G28 X Y	Z		      ; Re-home
              {% endif %}
              G91
              G1 Z10 Y-10 X-10 F4000
              G90
          {% endif %}
      {% endif %}
    Dock_Probe_Unlock
    G1 X135 Y307 Z10 F9000
    M117 Heating..
    STATUS_HEATING
    M104 S{EXTRUDER_TEMP}
    M109 S{EXTRUDER_TEMP}             ; Set and wait for nozzle to reach temperature
    SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=enable_purge VALUE="True"
    SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=wipe_qty VALUE="4"
    SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=purge_ret VALUE="0"    
    clean_nozzle                      ; clean nozzle
    CALIBRATE_Z
    #BED_MESH_PROFILE LOAD=default   ; load mesh if needed
    # Adjust the G-Code Z offset with the Z_ADJUST parameter if needed
    # SET_GCODE_OFFSET Z_ADJUST={z_adjust} MOVE=1
    G92 E0                         ; zero the extruder
    STATUS_READY
    M117 Intro Line..
    _PURGE_LINE
    M117 Printing...
    status_printing

[gcode_macro PRINT_END_TPU]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    M220 S100                      ; reset print speed override to 100% 
    M221 S100               ; reset extrude factor override to 100% 
    G92 E0                         ; zero the extruder
    G1 E-1.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F3600            ; park nozzle at rear
    STATUS_OFF
    #BED_MESH_CLEAR

## conditional home
[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

  # Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro M204]
rename_existing: M99204
gcode:
    # Parameters
    {% set ACCEL = params.S|int %}
    SET_VELOCITY_LIMIT ACCEL={ACCEL} ACCEL_TO_DECEL={ACCEL/2}

[gcode_macro SEARCH_VARS] #Methos wrote this
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
variable_adaptive_enable = True
variable_z_height = 0.4
variable_tip_distance = 10
variable_purge_amount = 40
variable_flow_rate = 10
variable_x_default = 10
variable_y_default = 10
variable_size = 10
variable_distance_to_object_x = 10
variable_distance_to_object_y = 10
variable_display_parameters = True
gcode = 
	
	{% if display_parameters == True %}
	{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
	{ action_respond_info("z_height        : %f" % (z_height))  }
	{ action_respond_info("tip_distance    : %f" % (tip_distance))  }
	{ action_respond_info("purge_amount    : %f" % (purge_amount))  }
	{ action_respond_info("flow_rate       : %f" % (flow_rate))  }
	{ action_respond_info("x_default       : %f" % (x_default))  }
	{ action_respond_info("y_default       : %f" % (y_default))  }
	{ action_respond_info("size            : %f" % (size))  }
	{ action_respond_info("distance_to_object_x : %f" % (distance_to_object_x))  }
	{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
	{% endif %}
	
	{% if adaptive_enable == True %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
	{% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
	{% set x_origin = ([x_origin, 0] | max) %}
	{% set y_origin = ([y_origin, 0] | max) %}
	{% else %}
	{% set x_origin = x_default | float %}
	{% set y_origin = y_default | float %}
	{% endif %}
	{% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
	{% set prepurge_speed = flow_rate / 2.405 %}
	{% set travel_speed = printer.toolhead.max_velocity %}
	{ action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }
	
	G92 E0
	G0 F{travel_speed*60}
	G90
	G0 X{x_origin} Y{y_origin+size/2}
	G0 Z{z_height}
	M83
	G1 E{tip_distance} F{prepurge_speed*60}
	G1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60}
	G1 E-.5 F2100
	G0 Z{z_height*2}
	G0 X{x_origin+size*0.789} Y{y_origin+size}
	G0 Z{z_height}
	G1 E.5 F2100
	G1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}
	G1 E-.5 F2100
	G0 Z{z_height*2}
	G0 X{x_origin+size*0.711} Y{y_origin}
	G0 Z{z_height}
	G1 E.5 F2100
	G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{z_height*2}

[gcode_macro SETUP_VORON_PURGE]
gcode = 
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=tip_distance  VALUE={params.TIP_DISTANCE|default(10)|float}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(10)|float}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=size          VALUE={params.SIZE|default(10)|float}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=distance_to_object_x     VALUE={params.DISTANCE_TO_OBJECT_X|default(10)|float}
	SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}